<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Blog Management - Admin Portal</title>
    <link rel="stylesheet" href="/css/styles.css">
    <style>
        .admin-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .admin-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding: 20px;
            background: linear-gradient(135deg, var(--primary), #ff6600);
            color: white;
            border-radius: 16px;
        }
        
        .admin-header h1 {
            margin: 0;
            font-size: 2rem;
        }
        
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-weight: bold;
            text-decoration: none;
            display: inline-block;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .btn-primary {
            background: white;
            color: var(--primary);
            border: 2px solid white;
        }
        
        .btn-primary:hover {
            background: #f0f0f0;
            transform: translateY(-2px);
        }
        
        .btn-secondary {
            background: #f0f0f0;
            color: #333;
            border: 2px solid #ddd;
        }
        
        .btn-secondary:hover {
            background: #e0e0e0;
        }
        
        .btn-danger {
            background: #dc3545;
            color: white;
            border: 2px solid #dc3545;
        }
        
        .btn-danger:hover {
            background: #c82333;
        }
        
        .btn-success {
            background: #28a745;
            color: white;
            border: 2px solid #28a745;
        }
        
        .btn-success:hover {
            background: #218838;
        }
        
        .blog-list {
            background: white;
            border: 3px solid #111;
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 8px 8px 0 #00000040;
        }
        
        .blog-item {
            padding: 20px;
            border-bottom: 2px solid #f0f0f0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .blog-item:last-child {
            border-bottom: none;
        }
        
        .blog-info {
            flex: 1;
        }
        
        .blog-info h3 {
            margin: 0 0 8px;
            color: #333;
        }
        
        .blog-info p {
            margin: 0 0 4px;
            color: #666;
            font-size: 0.9rem;
        }
        
        .blog-actions {
            display: flex;
            gap: 10px;
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        
        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 30px;
            border: 3px solid #111;
            border-radius: 16px;
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f0f0f0;
        }
        
        .modal-header h2 {
            margin: 0;
            color: #333;
        }
        
        .close {
            color: #aaa;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        
        .close:hover {
            color: #000;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #333;
        }
        
        .form-group input,
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
            font-family: inherit;
        }
        
        .form-group select {
            background: white;
            cursor: pointer;
        }
        
        .form-group textarea {
            min-height: 120px;
            resize: vertical;
        }
        
        .form-actions {
            display: flex;
            gap: 15px;
            justify-content: flex-end;
            margin-top: 30px;
        }
        
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }
        
        .empty-state h3 {
            margin: 0 0 10px;
            color: #333;
        }
        
        .back-link {
            display: inline-block;
            margin-bottom: 20px;
            padding: 10px 20px;
            background: #f0f0f0;
            color: #333;
            text-decoration: none;
            border-radius: 8px;
            border: 2px solid #ddd;
            transition: all 0.3s ease;
        }
        
        .back-link:hover {
            background: #e0e0e0;
            transform: translateY(-2px);
        }
        
        .image-preview {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin-top: 10px;
        }
        
        .image-preview img {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 8px;
            border: 2px solid #ddd;
        }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: bold;
            z-index: 10000;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            animation: slideIn 0.3s ease;
            max-width: 300px;
        }
        
        .notification.success {
            background: #28a745;
        }
        
        .notification.error {
            background: #dc3545;
        }
        
        .notification.info {
            background: #007bff;
        }
        
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        
        @keyframes slideOut {
            from { transform: translateX(0); opacity: 1; }
            to { transform: translateX(100%); opacity: 0; }
        }
    </style>
</head>
<body>
    <div class="admin-container">
        <a href="/admin" class="back-link">‚Üê Back to Admin Portal</a>
        
        <div class="admin-header">
            <h1>üìù Blog Management</h1>
            <button class="btn btn-primary" onclick="openModal('add')">+ Add New Post</button>
        </div>
        
        <div class="blog-list" id="blog-list">
            <!-- Blog posts will be loaded here -->
        </div>
        
        <div id="empty-state" class="empty-state" style="display: none;">
            <h3>No blog posts yet</h3>
            <p>Create your first blog post to get started!</p>
        </div>
    </div>
    
    <!-- Add/Edit Modal -->
    <div id="blog-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modal-title">Add New Blog Post</h2>
                <span class="close" onclick="closeModal()">&times;</span>
            </div>
            <form id="blog-form">
                <div class="form-group">
                    <label for="title">Title</label>
                    <input type="text" id="title" name="title" required>
                </div>
                <div class="form-group">
                    <label for="slug">Slug (URL-friendly name)</label>
                    <input type="text" id="slug" name="slug" required>
                </div>
                <div class="form-group">
                    <label for="date">Publish Date</label>
                    <input type="date" id="date" name="date" required>
                </div>
                <div class="form-group">
                    <label for="status">Status</label>
                    <select id="status" name="status" required>
                        <option value="published">Published</option>
                        <option value="draft">Draft</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="excerpt">Excerpt (Short description)</label>
                    <textarea id="excerpt" name="excerpt" required></textarea>
                </div>
                <div class="form-group">
                    <label for="content">Content (HTML)</label>
                    <textarea id="content" name="content" required style="min-height: 200px;"></textarea>
                </div>
                <div class="form-group">
                    <label for="blog-images">Blog Images (Maximum 5)</label>
                    <input type="file" id="blog-images" name="blogImage" accept="image/*" multiple>
                    <small style="color: #666; font-size: 0.9rem;">Upload up to 5 images to be displayed with this blog post. Click on an image to set it as the cover photo.</small>
                    <div id="images-preview" class="image-preview" style="display: none;">
                        <!-- Image previews will be shown here -->
                    </div>
                    <div id="cover-photo-section" style="margin-top: 10px; display: none;">
                        <label style="font-weight: bold; color: #333;">Cover Photo:</label>
                        <div id="cover-photo-indicator" style="color: #28a745; font-weight: bold; margin-top: 5px;">None selected</div>
                    </div>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                    <button type="submit" class="btn btn-success">Save Post</button>
                </div>
            </form>
        </div>
    </div>
    
    <script>
        let currentEditId = null;
        let selectedImages = [];
        
        // Notification system
        function showNotification(message, type = 'info') {
            // Remove existing notifications
            const existingNotifications = document.querySelectorAll('.notification');
            existingNotifications.forEach(notification => notification.remove());
            
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            document.body.appendChild(notification);
            
            // Auto remove after 3 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.style.animation = 'slideOut 0.3s ease';
                    setTimeout(() => notification.remove(), 300);
                }
            }, 3000);
        }
        
        // Load blog posts
        function loadBlogs() {
            fetch('/api/blogs')
                .then(response => response.json())
                .then(data => {
                    const blogList = document.getElementById('blog-list');
                    const emptyState = document.getElementById('empty-state');
                    
                    if (Object.keys(data).length === 0) {
                        blogList.style.display = 'none';
                        emptyState.style.display = 'block';
                    } else {
                        blogList.style.display = 'block';
                        emptyState.style.display = 'none';
                        
                        blogList.innerHTML = Object.values(data).map(post => `
                            <div class="blog-item">
                                <div class="blog-info">
                                    <div style="display: flex; align-items: flex-start; gap: 15px;">
                                        <div style="min-width: 80px;">
                                            ${post.images && post.images.length > 0 ? `
                                                <div style="display: flex; gap: 5px; flex-wrap: wrap;">
                                                    ${post.images.slice(0, 3).map(img => `<img src="${img}" style="width: 25px; height: 25px; object-fit: cover; border-radius: 4px; border: 1px solid #ddd;">`).join('')}
                                                    ${post.images.length > 3 ? `<div style="width: 25px; height: 25px; background: #f0f0f0; border-radius: 4px; border: 1px solid #ddd; display: flex; align-items: center; justify-content: center; font-size: 10px; color: #666;">+${post.images.length - 3}</div>` : ''}
                                                </div>
                                            ` : ''}
                                        </div>
                                        <div>
                                            <h3>${post.title} 
                                                <span style="font-size: 0.8em; padding: 2px 8px; border-radius: 12px; margin-left: 10px; font-weight: normal;
                                                    ${post.status === 'published' ? 'background: #d4edda; color: #155724;' : 
                                                      post.status === 'draft' ? 'background: #fff3cd; color: #856404;' : 
                                                      'background: #cce5ff; color: #004085;'}">
                                                    ${post.status || 'published'}
                                                </span>
                                            </h3>
                                            <p><strong>Date:</strong> ${post.date}</p>
                                            <p><strong>Slug:</strong> ${post.slug}</p>
                                            <p>${post.excerpt}</p>
                                            ${post.images && post.images.length > 0 ? `<p><strong>Images:</strong> ${post.images.length}</p>` : ''}
                                        </div>
                                    </div>
                                </div>
                                <div class="blog-actions">
                                    <button class="btn btn-secondary" onclick="editPost('${post.slug}')">Edit</button>
                                    <button class="btn btn-danger" onclick="deletePost('${post.slug}')">Delete</button>
                                </div>
                            </div>
                        `).join('');
                    }
                })
                .catch(error => {
                    console.error('Error loading blogs:', error);
                    showNotification('Error loading blogs: ' + error.message, 'error');
                });
        }
        
        // Open modal
        function openModal(type, post = null) {
            const modal = document.getElementById('blog-modal');
            const title = document.getElementById('modal-title');
            const form = document.getElementById('blog-form');
            
            if (type === 'add') {
                title.textContent = 'Add New Blog Post';
                form.reset();
                currentEditId = null;
                selectedImages = [];
                document.getElementById('images-preview').style.display = 'none';
                document.getElementById('images-preview').innerHTML = '';
            } else if (type === 'edit') {
                title.textContent = 'Edit Blog Post';
                document.getElementById('title').value = post.title;
                document.getElementById('slug').value = post.slug;
                document.getElementById('date').value = post.date;
                document.getElementById('status').value = post.status || 'published';
                document.getElementById('excerpt').value = post.excerpt;
                document.getElementById('content').value = post.content;
                currentEditId = post.slug;
                
                // Show existing images
                selectedImages = [];
                if (post.images && post.images.length > 0) {
                    post.images.forEach((imageUrl, index) => {
                        selectedImages.push({
                            file: null,
                            preview: imageUrl,
                            id: Date.now() + index,
                            isExisting: true
                        });
                    });
                    renderImagePreviews();
                    document.getElementById('images-preview').style.display = 'flex';
                } else {
                    document.getElementById('images-preview').style.display = 'none';
                }
            }
            
            modal.style.display = 'block';
        }
        
        // Close modal
        function closeModal() {
            document.getElementById('blog-modal').style.display = 'none';
        }
        
        // Edit post
        function editPost(slug) {
            fetch(`/api/blogs/${slug}`)
                .then(response => response.json())
                .then(post => {
                    openModal('edit', post);
                })
                .catch(error => {
                    console.error('Error loading post:', error);
                    showNotification('Error loading post: ' + error.message, 'error');
                });
        }
        
        // Delete post
        function deletePost(slug) {
            if (confirm('Are you sure you want to delete this blog post?')) {
                fetch(`/api/blogs/${slug}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        loadBlogs();
                        showNotification('Blog post deleted successfully!', 'success');
                    } else {
                        showNotification('Error deleting post: ' + data.error, 'error');
                    }
                })
                .catch(error => {
                    console.error('Error deleting post:', error);
                    showNotification('Error deleting post: ' + error.message, 'error');
                });
            }
        }
        
        // Handle form submission
        document.getElementById('blog-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Show loading state
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            submitBtn.textContent = 'Saving...';
            submitBtn.disabled = true;
            
            // Get form data
            const formData = new FormData(this);
            
            // Add existing images if editing
            if (currentEditId) {
                const existingImages = selectedImages.filter(img => img.isExisting).map(img => img.preview);
                if (existingImages.length > 0) {
                    formData.append('existingImages', JSON.stringify(existingImages));
                }
            }
            
            // Add new images - append each file individually
            // Sort images so cover photo comes first
            const sortedImages = [...selectedImages].sort((a, b) => {
                if (a.isCoverPhoto) return -1;
                if (b.isCoverPhoto) return 1;
                return 0;
            });
            
            // Add cover photo order information
            formData.append('coverPhotoOrder', JSON.stringify(sortedImages.map((img, index) => ({
                id: img.id,
                isCoverPhoto: img.isCoverPhoto,
                order: index
            }))));
            
            sortedImages.forEach((img) => {
                if (img.file) {
                    formData.append('blogImage', img.file);
                }
            });
            
            const url = currentEditId ? `/api/blogs/${currentEditId}` : '/api/blogs';
            const method = currentEditId ? 'PUT' : 'POST';
            
            fetch(url, {
                method: method,
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    closeModal();
                    loadBlogs();
                    showNotification('Blog post saved successfully!', 'success');
                } else {
                    showNotification('Error saving post: ' + (data.error || 'Unknown error'), 'error');
                }
            })
            .catch(error => {
                console.error('Error saving post:', error);
                showNotification('Error saving post: ' + error.message, 'error');
            })
            .finally(() => {
                // Reset button state
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;
            });
        });
        
        // Auto-generate slug from title
        document.getElementById('title').addEventListener('input', function() {
            if (!currentEditId) {
                const slug = this.value
                    .toLowerCase()
                    .replace(/[^a-z0-9\s-]/g, '')
                    .replace(/\s+/g, '-')
                    .replace(/-+/g, '-')
                    .trim('-');
                document.getElementById('slug').value = slug;
            }
        });
        
        // Set today's date as default
        document.getElementById('date').value = new Date().toISOString().split('T')[0];
        
        // Handle image uploads
        document.getElementById('blog-images').addEventListener('change', function(e) {
            const files = Array.from(e.target.files);
            
            // Limit to 5 images
            if (files.length > 5) {
                alert('You can only select up to 5 images');
                files.splice(5);
                e.target.value = '';
            }
            
            // Clear existing previews
            selectedImages = [];
            document.getElementById('images-preview').innerHTML = '';
            
            if (files.length > 0) {
                files.forEach((file, index) => {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        selectedImages.push({
                            file: file,
                            preview: e.target.result,
                            id: Date.now() + index,
                            isCoverPhoto: index === 0 // Set first image as cover by default
                        });
                        
                                renderImagePreviews();
                        document.getElementById('images-preview').style.display = 'flex';
                    };
                    reader.readAsDataURL(file);
                });
            }
        });
        
        // Render image previews
        function renderImagePreviews() {
            const container = document.getElementById('images-preview');
            container.innerHTML = '';
            
            selectedImages.forEach(img => {
                const imageDiv = document.createElement('div');
                imageDiv.style.position = 'relative';
                imageDiv.style.cursor = 'pointer';
                imageDiv.style.transition = 'all 0.3s ease';
                imageDiv.style.border = img.isCoverPhoto ? '3px solid #28a745' : '2px solid #ddd';
                imageDiv.style.borderRadius = '8px';
                imageDiv.style.padding = '5px';
                imageDiv.style.margin = '5px';
                imageDiv.style.display = 'inline-block';
                
                        imageDiv.innerHTML = `
                    <img src="${img.preview}" style="width: 100px; height: 100px; object-fit: cover; border-radius: 4px;">
                    <button type="button" onclick="removeImage(${img.id})" style="position: absolute; top: -5px; right: -5px; background: #dc3545; color: white; border: none; border-radius: 50%; width: 20px; height: 20px; cursor: pointer; font-size: 12px;">√ó</button>
                    ${img.isCoverPhoto ? '<div style="position: absolute; bottom: 5px; left: 5px; background: #28a745; color: white; padding: 2px 6px; border-radius: 4px; font-size: 10px; font-weight: bold;">COVER</div>' : ''}
                `;
                
                // Click to set as cover photo
                imageDiv.onclick = () => setCoverPhoto(img.id);
                
                container.appendChild(imageDiv);
            });
            
            // Show cover photo section if images exist
            if (selectedImages.length > 0) {
                document.getElementById('cover-photo-section').style.display = 'block';
                updateCoverPhotoIndicator();
                    } else {
                document.getElementById('cover-photo-section').style.display = 'none';
            }
        }
        
        // Set cover photo
        function setCoverPhoto(imageId) {
            // Remove cover photo status from all images
            selectedImages.forEach(img => {
                img.isCoverPhoto = false;
            });
            
            // Set the selected image as cover photo
            const selectedImg = selectedImages.find(img => img.id === imageId);
            if (selectedImg) {
                selectedImg.isCoverPhoto = true;
                renderImagePreviews();
            }
        }
        
        // Update cover photo indicator
        function updateCoverPhotoIndicator() {
            const coverPhoto = selectedImages.find(img => img.isCoverPhoto);
            const indicator = document.getElementById('cover-photo-indicator');
            
            if (coverPhoto) {
                indicator.textContent = `Selected: Image ${selectedImages.indexOf(coverPhoto) + 1}`;
                indicator.style.color = '#28a745';
            } else {
                indicator.textContent = 'None selected';
                indicator.style.color = '#dc3545';
            }
        }
        
        // Remove image
        function removeImage(imageId) {
            selectedImages = selectedImages.filter(img => img.id !== imageId);
            
            if (selectedImages.length === 0) {
                document.getElementById('images-preview').style.display = 'none';
                document.getElementById('blog-images').value = '';
                document.getElementById('cover-photo-section').style.display = 'none';
            } else {
                renderImagePreviews();
            }
        }
        
        // Load blogs on page load
        loadBlogs();
        
        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('blog-modal');
            if (event.target === modal) {
                closeModal();
            }
        }
    </script>
</body>
</html>