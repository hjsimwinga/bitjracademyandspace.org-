<h1>Events</h1>
<p>ðŸŒŸ Dive into Bitcoin adventures! From teacher training to student graduations, join our exciting workshops, community meetups, and hands-on learning experiences that make Bitcoin fun for everyone aged 6-17.</p>

<section>
  <h2>Upcoming</h2>
  <div class="card-grid">
    <% if (events && events.length) { %>
      <% events.forEach(e => { %>
        <article class="card event-card" data-event-id="<%= e.id %>">
          <div class="card-content">
            <h3><%= e.title %></h3>
            <p><%= e.date %> Â· <%= e.location %></p>
            <p><%= e.summary %></p>
            <a class="btn" href="/events/<%= e.id %>/register">Register</a>
          </div>
          <div class="flyer-overlay">
            <div class="flyer-image">
              <% if (e.flyer) { %>
                <img src="<%= e.flyer %>" alt="<%= e.title %> Flyer">
              <% } else { %>
                <div class="flyer-placeholder">
                  <div class="flyer-icon">ðŸ“„</div>
                  <p>Flyer Coming Soon!</p>
                </div>
              <% } %>
            </div>
          </div>
        </article>
      <% }) %>
    <% } else { %>
      <p>No events yet. Check back soon!</p>
    <% } %>
  </div>
</section>

<section>
  <h2>Calendar</h2>
  <div class="calendar-container">
    <div class="calendar-header">
      <button id="prevMonth" class="calendar-nav">&lt;</button>
      <h3 id="currentMonth"></h3>
      <button id="nextMonth" class="calendar-nav">&gt;</button>
    </div>
    <div class="calendar-grid" id="calendarGrid">
      <!-- Calendar will be generated by JavaScript -->
    </div>
    <div class="calendar-legend">
      <div class="legend-item clickable" data-event-type="1" title="Click to go to Training Events">
        <div class="legend-color event-color-1"></div>
        <span>Training Events</span>
      </div>
      <div class="legend-item clickable" data-event-type="2" title="Click to go to Graduation/Meetup">
        <div class="legend-color event-color-2"></div>
        <span>Graduation/Meetup</span>
      </div>
      <div class="legend-item clickable" data-event-type="3" title="Click to go to Conference">
        <div class="legend-color event-color-3"></div>
        <span>Conference</span>
      </div>
    </div>
  </div>
</section>

<script>
  let currentDate = new Date(2025, 8, 1); // Start on September 2025
  let events = [];

  async function loadEvents(){
    const res = await fetch('/events/calendar');
    events = await res.json();
    generateCalendar();
  }

  function generateCalendar() {
    const calendarGrid = document.getElementById('calendarGrid');
    const currentMonth = document.getElementById('currentMonth');
    
    if (!calendarGrid || !currentMonth) return;

    // Clear previous calendar
    calendarGrid.innerHTML = '';

    // Set current month display
    const monthNames = ["January", "February", "March", "April", "May", "June",
      "July", "August", "September", "October", "November", "December"];
    currentMonth.textContent = `${monthNames[currentDate.getMonth()]} ${currentDate.getFullYear()}`;

    // Get first day of month and number of days
    const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
    const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
    const daysInMonth = lastDay.getDate();
    const startingDayOfWeek = firstDay.getDay();

    // Create day headers
    const dayHeaders = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    dayHeaders.forEach(day => {
      const dayHeader = document.createElement('div');
      dayHeader.className = 'calendar-day-header';
      dayHeader.textContent = day;
      calendarGrid.appendChild(dayHeader);
    });

    // Create empty cells for days before month starts
    for (let i = 0; i < startingDayOfWeek; i++) {
      const emptyDay = document.createElement('div');
      emptyDay.className = 'calendar-day empty';
      calendarGrid.appendChild(emptyDay);
    }

    // Create days of the month
    for (let day = 1; day <= daysInMonth; day++) {
      const dayElement = document.createElement('div');
      dayElement.className = 'calendar-day';
      dayElement.textContent = day;

      // Check if this day has an event
      const dayDate = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
      const dayEvents = events.filter(event => {
        // Handle both single dates and date ranges
        if (event.date.includes(' to ')) {
          const [startDate, endDate] = event.date.split(' to ');
          return dayDate >= startDate && dayDate <= endDate;
        } else {
          return event.date === dayDate;
        }
      });

      if (dayEvents.length > 0) {
        dayElement.classList.add('has-event');
        const event = dayEvents[0];
        
        // Assign color based on event type
        if (event.title.includes('Teachers') || event.title.includes('Training')) {
          dayElement.classList.add('event-color-1');
        } else if (event.title.includes('Graduation') || event.title.includes('Meetup')) {
          dayElement.classList.add('event-color-2');
        } else if (event.title.includes('Conference')) {
          dayElement.classList.add('event-color-3');
        } else {
          dayElement.classList.add('event-color-1');
        }

        // Add event tooltip
        dayElement.title = `${event.title} - ${event.location}`;
        dayElement.addEventListener('click', () => {
          window.location.href = `/events/${event.id}/register`;
        });
        dayElement.style.cursor = 'pointer';
      }

      // Highlight today with border only
      const today = new Date();
      if (currentDate.getFullYear() === today.getFullYear() && 
          currentDate.getMonth() === today.getMonth() && 
          day === today.getDate()) {
        dayElement.classList.add('today');
      }

      calendarGrid.appendChild(dayElement);
    }
  }

  // Navigation event listeners
  document.getElementById('prevMonth').addEventListener('click', () => {
    currentDate.setMonth(currentDate.getMonth() - 1);
    generateCalendar();
  });

  document.getElementById('nextMonth').addEventListener('click', () => {
    currentDate.setMonth(currentDate.getMonth() + 1);
    generateCalendar();
  });

  // Add clickable legend functionality
  function addLegendClickHandlers() {
    document.querySelectorAll('.legend-item.clickable').forEach(item => {
      item.addEventListener('click', () => {
        const eventType = item.getAttribute('data-event-type');
        const eventColorClass = `event-color-${eventType}`;
        
        // Find the first event with this color class in the current events data
        const targetEvent = events.find(event => {
          if (event.title.includes('Teachers') || event.title.includes('Training')) {
            return eventType === '1';
          } else if (event.title.includes('Graduation') || event.title.includes('Meetup')) {
            return eventType === '2';
          } else if (event.title.includes('Conference')) {
            return eventType === '3';
          }
          return false;
        });
        
        if (targetEvent) {
          // Parse the event date
          let eventDate;
          if (targetEvent.date.includes(' to ')) {
            eventDate = new Date(targetEvent.date.split(' to ')[0]);
          } else {
            eventDate = new Date(targetEvent.date);
          }
          
          // Navigate to the correct month
          currentDate = new Date(eventDate.getFullYear(), eventDate.getMonth(), 1);
          generateCalendar();
          
          // Wait for calendar to render, then scroll to the event
          setTimeout(() => {
            const eventDays = document.querySelectorAll(`.calendar-day.${eventColorClass}`);
            if (eventDays.length > 0) {
              eventDays[0].scrollIntoView({ behavior: 'smooth', block: 'center' });
              
              // Add a temporary highlight effect
              eventDays[0].classList.add('legend-highlight');
              setTimeout(() => {
                eventDays[0].classList.remove('legend-highlight');
              }, 2000);
            }
          }, 100);
        }
      });
    });
  }

  // Load events and generate calendar
  loadEvents().then(() => {
    addLegendClickHandlers();
  });
</script>


